import streamlit as st
import streamlit_option_menu as som
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import utils
from datetime import datetime

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(
    page_title="Qu·ªπ ƒë·ªôi b√≥ng Eurofins",
    page_icon="üí∞",
    layout="wide"
)

# Ki·ªÉm tra v√† kh·ªüi t·∫°o session state n·∫øu c·∫ßn
if 'transactions' not in st.session_state:
    st.session_state.transactions = []

# ƒê·∫£m b·∫£o summary lu√¥n ƒë∆∞·ª£c kh·ªüi t·∫°o
utils.initialize_data()

# T·∫°o header v√† menu ƒëi·ªÅu h∆∞·ªõng
def main():
    # CSS
    st.markdown("""
    <style>
    .main-header {
        display: flex;
        align-items: center;
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    .logo-text {
        font-size: 1.5rem;
        font-weight: bold;
        margin-left: 0.5rem;
        color: #1E3A8A;
    }
    .main-container {
        padding: 1rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.markdown("""
    <div class="main-header">
        <div style="background-color: #1E3A8A; color: white; padding: 8px; border-radius: 8px;">
            <span style="font-size: 1.2rem;">üí∞</span>
        </div>
        <div class="logo-text">Qu·ªπ ƒë·ªôi b√≥ng Eurofins</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Menu ƒëi·ªÅu h∆∞·ªõng
    selected = som.option_menu(
        menu_title=None,
        options=["T·ªïng quan", "Giao d·ªãch", "B√°o c√°o"],
        icons=["house", "list-ul", "bar-chart"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal",
        styles={
            "container": {"padding": "0!important", "margin": "0!important"},
            "icon": {"color": "#1E3A8A", "font-size": "14px"},
            "nav-link": {"font-size": "14px", "text-align": "center", "margin": "0px", "--hover-color": "#eee"},
            "nav-link-selected": {"background-color": "#1E3A8A"},
        }
    )
    
    # Hi·ªÉn th·ªã trang t∆∞∆°ng ·ª©ng
    if selected == "T·ªïng quan":
        show_home_page()
    elif selected == "Giao d·ªãch":
        show_transactions_page()
    elif selected == "B√°o c√°o":
        show_reports_page()

def show_home_page():
    # Hi·ªÉn th·ªã trang ch·ªß tr·ª±c ti·∫øp trong app.py
    st.markdown("<h2>T·ªïng quan qu·ªπ</h2>", unsafe_allow_html=True)
    
    # T·∫°o layout
    col1, col2 = st.columns([3, 2])
    
    # C·∫≠p nh·∫≠t t·ªïng h·ª£p
    utils.update_summary()
    
    # Hi·ªÉn th·ªã th√¥ng tin t·ªïng h·ª£p
    with col1:
        # Th·∫ª th√¥ng tin
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); margin-bottom: 20px;">
            <h3>S·ªë d∆∞ hi·ªán t·∫°i</h3>
            <div style="font-size: 2rem; font-weight: bold; color: #1E3A8A; margin: 10px 0;">
                {current_balance}
            </div>
            <div style="display: flex; justify-content: space-between; margin-top: 15px;">
                <div>
                    <div style="font-size: 0.9rem; color: #6c757d;">T·ªïng thu</div>
                    <div style="font-size: 1.2rem; color: #198754; font-weight: 500;">{total_income}</div>
                </div>
                <div>
                    <div style="font-size: 0.9rem; color: #6c757d;">T·ªïng chi</div>
                    <div style="font-size: 1.2rem; color: #dc3545; font-weight: 500;">{total_expense}</div>
                </div>
            </div>
        </div>
        """.format(
            current_balance=utils.format_currency(st.session_state.summary['current_balance']),
            total_income=utils.format_currency(st.session_state.summary['total_income']),
            total_expense=utils.format_currency(st.session_state.summary['total_expense'])
        ), unsafe_allow_html=True)
        
        # Danh s√°ch giao d·ªãch g·∫ßn ƒë√¢y
        st.markdown("<h3>Giao d·ªãch g·∫ßn ƒë√¢y</h3>", unsafe_allow_html=True)
        
        # L·∫•y 5 giao d·ªãch g·∫ßn nh·∫•t
        recent_transactions = st.session_state.transactions[:5]
        
        # T·∫°o dataframe
        df = utils.get_transaction_df(recent_transactions)
        
        # Hi·ªÉn th·ªã danh s√°ch giao d·ªãch
        if not df.empty:
            for _, row in df.iterrows():
                cols = st.columns([3, 2, 2, 3])
                
                # Format row
                icon = "‚¨áÔ∏è" if row['type'] == 'income' else "‚¨ÜÔ∏è"
                color = "green" if row['type'] == 'income' else "red"
                
                cols[0].markdown(f"<div style='display: flex; align-items: center;'><span>{icon}</span><span style='margin-left: 5px;'>{row['description']}</span></div>", unsafe_allow_html=True)
                cols[1].markdown(f"{row['category']}")
                cols[2].markdown(f"{row['date']}")
                cols[3].markdown(f"<span style='color: {color};'>{row['amount_display']}</span>", unsafe_allow_html=True)
                
                # ƒê∆∞·ªùng ph√¢n c√°ch
                st.markdown("<hr style='margin: 5px 0; opacity: 0.3;'>", unsafe_allow_html=True)
        else:
            st.info("Ch∆∞a c√≥ giao d·ªãch n√†o")

    # C·ªôt ph·∫£i
    with col2:
        # Form th√™m giao d·ªãch m·ªõi
        st.markdown("<h3>Th√™m giao d·ªãch m·ªõi</h3>", unsafe_allow_html=True)
        
        with st.form(key="add_transaction_form"):
            # Lo·∫°i giao d·ªãch
            transaction_type = st.radio(
                "Lo·∫°i giao d·ªãch",
                options=["income", "expense"],
                format_func=lambda x: "Thu" if x == "income" else "Chi",
                horizontal=True
            )
            
            # S·ªë ti·ªÅn
            amount = st.number_input(
                "S·ªë ti·ªÅn (VNƒê)",
                min_value=1000.0,
                step=10000.0,
                format="%g"
            )
            
            # M√¥ t·∫£
            description = st.text_input("M√¥ t·∫£")
            
            # Danh m·ª•c
            category = st.selectbox(
                "Danh m·ª•c",
                options=utils.CATEGORIES[transaction_type]
            )
            
            # Ng√†y th√°ng
            date = st.date_input("Ng√†y")
            
            # N√∫t th√™m
            button_label = "Th√™m kho·∫£n thu" if transaction_type == "income" else "Th√™m kho·∫£n chi"
            
            submitted = st.form_submit_button(
                button_label,
                use_container_width=True,
                type="primary"
            )
            
            if submitted:
                # Validate
                if not description or amount <= 0:
                    st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† s·ªë ti·ªÅn h·ª£p l·ªá")
                else:
                    # Th√™m giao d·ªãch
                    transaction_data = {
                        'type': transaction_type,
                        'amount': amount,
                        'description': description,
                        'category': category,
                        'date': date.strftime("%Y-%m-%d")
                    }
                    
                    utils.add_transaction(transaction_data)
                    st.success("ƒê√£ th√™m giao d·ªãch th√†nh c√¥ng!")
                    st.rerun() # Changed here

def show_transactions_page():
    # Container ch√≠nh
    st.markdown("<h2>Qu·∫£n l√Ω giao d·ªãch</h2>", unsafe_allow_html=True)
    
    # Layout: 2 c·ªôt (t·ªâ l·ªá 2:1)
    col_left, col_right = st.columns([2, 1])
    
    # C·ªôt tr√°i: Danh s√°ch giao d·ªãch v·ªõi b·ªô l·ªçc
    with col_left:
        st.markdown("<h3>L·ªãch s·ª≠ giao d·ªãch</h3>", unsafe_allow_html=True)
        
        # B·ªô l·ªçc
        filter_cols = st.columns([2, 1])
        with filter_cols[0]:
            search = st.text_input("T√¨m ki·∫øm giao d·ªãch", placeholder="Nh·∫≠p t·ª´ kh√≥a...")
        with filter_cols[1]:
            transaction_type_filter = st.selectbox(
                "Lo·∫°i giao d·ªãch",
                options=["all", "income", "expense"],
                format_func=lambda x: "T·∫•t c·∫£" if x == "all" else ("Thu" if x == "income" else "Chi")
            )
        
        # L·ªçc danh s√°ch giao d·ªãch
        filtered_transactions = st.session_state.transactions
        
        # L·ªçc theo lo·∫°i giao d·ªãch
        if transaction_type_filter != "all":
            filtered_transactions = [t for t in filtered_transactions if t['type'] == transaction_type_filter]
        
        # L·ªçc theo t·ª´ kh√≥a
        if search:
            filtered_transactions = [
                t for t in filtered_transactions 
                if search.lower() in t['description'].lower() or search.lower() in t['category'].lower()
            ]
        
        # T·∫°o dataframe
        df = utils.get_transaction_df(filtered_transactions)
        
        # Hi·ªÉn th·ªã danh s√°ch giao d·ªãch
        if not df.empty:
            st.markdown("<div style='max-height: 600px; overflow-y: auto;'>", unsafe_allow_html=True)
            
            for _, row in df.iterrows():
                cols = st.columns([3, 2, 2, 2, 1])
                
                # Format row
                icon = "‚¨áÔ∏è" if row['type'] == 'income' else "‚¨ÜÔ∏è"
                color = "green" if row['type'] == 'income' else "red"
                
                cols[0].markdown(f"<div style='display: flex; align-items: center;'><span>{icon}</span><span style='margin-left: 5px;'>{row['description']}</span></div>", unsafe_allow_html=True)
                cols[1].markdown(f"{row['category']}")
                cols[2].markdown(f"{row['date']}")
                cols[3].markdown(f"<span style='color: {color};'>{row['amount_display']}</span>", unsafe_allow_html=True)
                
                # N√∫t x√≥a
                if cols[4].button("üóëÔ∏è", key=f"delete_{row['id']}"):
                    # X√°c nh·∫≠n x√≥a
                    delete_confirm = st.warning(f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a giao d·ªãch '{row['description']}'?")
                    col1, col2 = st.columns(2)
                    
                    if col1.button("X√°c nh·∫≠n", key=f"confirm_{row['id']}"):
                        utils.delete_transaction(row['id'])
                        st.success("ƒê√£ x√≥a giao d·ªãch!")
                        st.rerun() # Changed here
                    
                    if col2.button("H·ªßy", key=f"cancel_{row['id']}"):
                        st.rerun() # Changed here
                
                # ƒê∆∞·ªùng ph√¢n c√°ch
                st.markdown("<hr style='margin: 5px 0; opacity: 0.3;'>", unsafe_allow_html=True)
            
            st.markdown("</div>", unsafe_allow_html=True)
        else:
            st.info("Kh√¥ng c√≥ giao d·ªãch n√†o")
    
    # C·ªôt ph·∫£i: Form th√™m giao d·ªãch
    with col_right:
        st.markdown("<h3>Th√™m giao d·ªãch m·ªõi</h3>", unsafe_allow_html=True)
        st.markdown("<div style='background-color: #f8f9fa; padding: 20px; border-radius: 10px;'>", unsafe_allow_html=True)
        
        with st.form(key="add_transaction_form_page"):
            # Lo·∫°i giao d·ªãch
            transaction_type = st.radio(
                "Lo·∫°i giao d·ªãch",
                options=["income", "expense"],
                format_func=lambda x: "Thu" if x == "income" else "Chi",
                horizontal=True
            )
            
            # S·ªë ti·ªÅn
            amount = st.number_input(
                "S·ªë ti·ªÅn (VNƒê)",
                min_value=1000.0,
                step=10000.0,
                format="%g"
            )
            
            # M√¥ t·∫£
            description = st.text_input("M√¥ t·∫£")
            
            # Danh m·ª•c
            category = st.selectbox(
                "Danh m·ª•c",
                options=utils.CATEGORIES[transaction_type]
            )
            
            # Ng√†y th√°ng
            date = st.date_input("Ng√†y")
            
            # N√∫t th√™m
            button_label = "Th√™m kho·∫£n thu" if transaction_type == "income" else "Th√™m kho·∫£n chi"
            
            submitted = st.form_submit_button(
                button_label,
                use_container_width=True,
                type="primary"
            )
            
            if submitted:
                # Validate
                if not description or amount <= 0:
                    st.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† s·ªë ti·ªÅn h·ª£p l·ªá")
                else:
                    # Th√™m giao d·ªãch
                    transaction_data = {
                        'type': transaction_type,
                        'amount': amount,
                        'description': description,
                        'category': category,
                        'date': date.strftime("%Y-%m-%d")
                    }
                    
                    utils.add_transaction(transaction_data)
                    st.success("ƒê√£ th√™m giao d·ªãch th√†nh c√¥ng!")
                    st.rerun() # Changed here
        
        st.markdown("</div>", unsafe_allow_html=True)

def show_reports_page():
    # Container ch√≠nh
    st.markdown("<h2>B√°o c√°o th√°ng</h2>", unsafe_allow_html=True)
    
    # L·∫•y danh s√°ch c√°c th√°ng
    months = utils.get_all_months()
    
    # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
    if not months:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu giao d·ªãch ƒë·ªÉ t·∫°o b√°o c√°o")
        return
    
    # Ch·ªçn th√°ng
    selected_month = st.selectbox(
        "Ch·ªçn th√°ng",
        options=months,
        format_func=lambda x: f"{x[5:7]}/{x[:4]}"  # Format MM/YYYY
    )
    
    # L·∫•y b√°o c√°o th√°ng ƒë√£ ch·ªçn
    report = utils.get_monthly_report(selected_month)
    
    # Hi·ªÉn th·ªã t√≥m t·∫Øt v√† bi·ªÉu ƒë·ªì
    col1, col2 = st.columns(2)
    
    # Card t·ªïng quan
    with col1:
        st.markdown("<h3>T·ªïng quan th√°ng</h3>", unsafe_allow_html=True)
        
        # T·∫°o card t·ªïng quan
        st.markdown(f"""
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #dee2e6;">
                <span style="color: #6c757d;">T·ªïng thu</span>
                <span style="color: #52c41a; font-weight: 500;">{utils.format_currency(report['total_income'])}</span>
            </div>
            <div style="display: flex; justify-content: space-between; padding: 10px 0; border-bottom: 1px solid #dee2e6;">
                <span style="color: #6c757d;">T·ªïng chi</span>
                <span style="color: #f5222d; font-weight: 500;">{utils.format_currency(report['total_expense'])}</span>
            </div>
            <div style="display: flex; justify-content: space-between; padding: 10px 0;">
                <span style="font-weight: 500;">S·ªë d∆∞</span>
                <span style="font-weight: 700; font-size: 18px;">{utils.format_currency(report['balance'])}</span>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        # Bi·ªÉu ƒë·ªì thu chi
        if report['total_income'] > 0 or report['total_expense'] > 0:
            fig = utils.plot_income_expense_bar(report['total_income'], report['total_expense'])
            st.plotly_chart(fig, use_container_width=True)
    
    # Bi·ªÉu ƒë·ªì theo danh m·ª•c
    with col2:
        st.markdown("<h3>Chi ti√™u theo danh m·ª•c</h3>", unsafe_allow_html=True)
        
        # L·∫•y chi ti√™u theo danh m·ª•c
        expense_by_category = utils.get_expense_by_category(report['transactions'])
        
        if expense_by_category:
            fig = utils.plot_category_pie(expense_by_category)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Kh√¥ng c√≥ d·ªØ li·ªáu chi ti√™u trong th√°ng n√†y")
    
    # Danh s√°ch giao d·ªãch trong th√°ng
    st.markdown("<h3>Giao d·ªãch trong th√°ng</h3>", unsafe_allow_html=True)
    
    # T·∫°o dataframe
    df = utils.get_transaction_df(report['transactions'])
    
    # Hi·ªÉn th·ªã danh s√°ch giao d·ªãch
    if not df.empty:
        st.markdown("<div style='max-height: 400px; overflow-y: auto;'>", unsafe_allow_html=True)
        
        for _, row in df.iterrows():
            cols = st.columns([3, 2, 2, 2, 1])
            
            # Format row
            icon = "‚¨áÔ∏è" if row['type'] == 'income' else "‚¨ÜÔ∏è"
            color = "green" if row['type'] == 'income' else "red"
            
            cols[0].markdown(f"<div style='display: flex; align-items: center;'><span>{icon}</span><span style='margin-left: 5px;'>{row['description']}</span></div>", unsafe_allow_html=True)
            cols[1].markdown(f"{row['category']}")
            cols[2].markdown(f"{row['date']}")
            cols[3].markdown(f"<span style='color: {color};'>{row['amount_display']}</span>", unsafe_allow_html=True)
            
            # N√∫t x√≥a
            if cols[4].button("üóëÔ∏è", key=f"delete_report_{row['id']}"):
                utils.delete_transaction(row['id'])
                st.rerun() # Changed here
            
            # ƒê∆∞·ªùng ph√¢n c√°ch
            st.markdown("<hr style='margin: 5px 0; opacity: 0.3;'>", unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.info("Kh√¥ng c√≥ giao d·ªãch n√†o trong th√°ng n√†y")

# Main
if __name__ == "__main__":
    main()